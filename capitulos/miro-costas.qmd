---
comments:
  hypothesis: true
editor_options: 
  chunk_output_type: console
---
# Datos

![](images/fisiografia.png)

[Characterization of Surface Evidence of Groundwater Flow Systems](https://www.mdpi.com/2073-4441/12/9/2459)

## Agenda

```{r}
#| label: inicio
#| echo: false

# tinytex::reinstall_tinytex(repository = "illinois")

library(officer)
library(stringr)
library(dplyr, warn.conflicts = FALSE)

agenda <- list.files(".", pattern = "docx", full.names = TRUE, recursive = TRUE)

texto <- read_docx(agenda)
texto <- docx_summary(texto)$text
num_proy <- str_extract(texto[1], "(?<= \\()(.*?)(?=\\))")
tit_proy <- str_extract(texto[1], "(?<=“)(.*?)(?= \\()")

actividades <- as.data.frame(texto[7:length(texto)])
actividades <- actividades[actividades != ""]
actividades <- actividades[str_detect(actividades, " {5,}", negate = TRUE)]


```


La reunión de inició del proyecto (**`r num_proy`**): 

::: {layout="[-1,10,-1]"}

*`r tit_proy`* 

:::

Se realizó del `r str_to_lower(str_remove(texto[5], "Fechas: "))`.


```{r}
#| label: lista_actividades
#| echo: false
#| results: asis

library(flextable)

plan <- tibble(tema = character(), subtema = character())
for(a in actividades)
  if(str_detect(a, "^\\d+:\\d+|Día"))
    {
      tema_a <- a
      plan <- bind_rows(plan, c(tema = a, subtema = ""))
    } else {
      plan <- bind_rows(plan, c(tema = tema_a, subtema = str_split(a, ", | y ")))
    }

plan_txt <- "\n"
for (p in (1:length(plan$subtema)))
{
  if (plan$subtema[p] == "")
  {
    if (str_detect(plan$tema[p], "Día"))
        {
          plan_txt <- str_to_sentence(paste0(plan_txt, "\n### ", plan$tema[p], "\n\n"))
          
    } else {
          plan_txt <- paste0(plan_txt, "\n+ **", plan$tema[p], "**", "\n\n")
    }
  } else {
    plan_txt <- paste0(plan_txt, "  + ", str_to_sentence(plan$subtema[p]), "\n")
  }
}

cat(plan_txt)
```


## Miro

### Construcción colaborativa de Redes Bayesianas

::: {layout-ncol="2"}
La propuesta que hacemos es usar *Miro* como plataforma de debate y construcción de consenso. 
Buscamos así aproximarnos a la estructura causal que vincula las variables que determinan el rendimiento y la sustentabilidad (social, económica y ambiental). Una vez resuelta esta etapa, es necesario transferir lo acordado en *Miro* a plataformas de análisis estadístico. Aquí, nos propusimos trasladar los resultados de *Miro* a *R*. Al hacer esto las posibilidades analíticas se potencian muy ampliamente. Como veremos, podemos recurrir a `dagitty` o incluso utilizar *Python* y *Netica*. 

![](Images/colaboracion.png)
:::

Hemos preparado una biblioteca con las rutinas necesarias para transferir lo trabajado en **Miro** (básicamente desarrollo conceptual) a **R**  en donde se podrá  continuar con el desarrollo formal del modelo según se requiera, cualitativa y cuantitativamente. Para instalarla y usarla hay que seguir las [indicaciones que se describen aquí](https://github.com/equihuam/miro2bayesNet). Consideren que para usarla habrá que hacer algunas preparaciones para interactuar con **Miro**. Se trata básicamente de tener los permisos de acceso. Habrá que obtener credenciales en la forma de un *token*, el cual hay que evitar distribuir. Por lo tanto, para operar hemos recurrido a la biblioteca `keyring` para mantenerlas confidenciales. Esta biblioteca permite utilizar el sistema de seguridad del equipo para la gestión de las claves. Para dar de alta una llave utiliza la instrucción de registro `key_set`, necesitarás dos identificadores de tu preferencia que deberán ir entrecomillados:

`key_set(service = "[ref. de tu preferencia]", username = "[id. de tu gusto]")`

Una vez registrada en el equipo la llave, queda lista para su uso en cualquier momento en esa máquina y deberás proporcionar los dos identificadores que elegiste para operar las *ingesta* a **R**, del modelo hecho en **Miro**.

```{r} 
#| label: Miro_usuario
#| echo: true
#| message: false
#| warning: false

if (!require(miro2bayes))
{
  library(devtools)
  install_github("equihuam/miro2bayesNet", force = TRUE)
}

library(miro2bayes)
library(bnlearn)
library(bnviewer)
library(tidyverse, quietly = TRUE, warn.conflicts = FALSE)

tableros <- miroBoards(servMiro = "miro", user = "miguel-edu-token")
tableros[, c("name", "id")]

tablero_tr <- tableros %>%
              filter(str_detect(name, "Costa")) %>%
              select(id, name)

datos_miro <- getMiro(servMiro = "miro", user = "miguel-edu-token",
                        board = tablero_tr)

miroValidation(datos_miro)

#neticaMiro <- miro2DNE(datos_miro)

#write(neticaMiro, "costa-arenosa.dne")

netMiro_bn <- miro2bnlearn(datos_miro)
netMiro_bn

variables <- tibble(var = datos_miro$nodes$var)

```



```{r}
#|label: dag

graphviz.plot(netMiro_bn, layout = "dot")

```


La lista de variables identificadas es:

```{r}
#| label: lista_vars
#| echo: false

# Arregla algunos problemas de la lectura del texto de las notas en Miro 
datos_miro$nodes <- 
  datos_miro$nodes %>%
  select(text, var, color) %>% 
  mutate(text = stringr::str_replace_all(text, pattern = '&#34;', replacement = '\\"'),
         text = stringr::str_replace_all(text, pattern = "&#43;", replacement = " \\+ "),
         text = stringr::str_replace_all(text, pattern = "http", replacement = "\nhttp"),
         text = stringr::str_replace_all(text, pattern = "(?<=[a-z])([A-Z])", replacement = " \\1"),
         text = stringr::str_replace_all(text, pattern = "Suelos sueltos", 
                                         replacement = "\nSuelos sueltos"),
         text = stringr::str_replace_all(text, pattern = "VALERIA ", replacement = "\n- VALERIA\n"),
         text = stringr::str_replace_all(text, pattern = "Eventos de vientos extremos.",
                                         replacement = "\nSuelos sueltos"),
         text = stringr::str_replace_all(text, pattern = "segundos\\)En versión",
                                         replacement = "segundos)\nEn versión"),
         text = stringr::str_replace_all(text, pattern = "arrastre\\?WB", replacement = "arrastre\\?\nWB"))


datos_miro$nodes %>%   
  select(text, var, color) %>% 
  flextable() %>% 
  width(j=1, width = 12, unit = "cm") %>% 
  width(j=2:3, width = 2, unit = "cm") %>% 
  padding(j = 1, padding.right = 50) %>% 
  fontsize(size = 8, part = "header") %>% 
  fontsize(size = 8)

```

